
syntax = "proto3";
import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "AElf.Contracts.AelfAcademy";
service AelfAcademyContract {
    option (aelf.csharp_state) = "AElf.Contracts.AelfAcademy.AelfAcademyContractState";

    //Action
    rpc Initialize (InitializeInput) returns (google.protobuf.Empty) { }
    rpc AddCourse (CourseInput) returns (google.protobuf.Empty) { }
    rpc AddAdmin (AddUserInput) returns (google.protobuf.Empty) { }
    rpc AddChiefModerator (AddUserInput) returns (google.protobuf.Empty) { }
    rpc AddLearner (google.protobuf.StringValue) returns (google.protobuf.Empty) { }
    rpc SubmitChallenge (SubmitChallengeInput) returns (google.protobuf.Empty) { }
    rpc ModerateChallenge (ModerateChallengeInput) returns (google.protobuf.Empty) {}
    rpc FundAcademy (google.protobuf.Int64Value) returns (google.protobuf.Empty) {}
    //View
    rpc GetAcademyInfo (google.protobuf.Empty) returns (AcademyInfo) {
        option (aelf.is_view) = true;
    }
    rpc GetLearners (google.protobuf.Empty) returns (UserOutputList){
     option (aelf.is_view) = true;
    }
   
    rpc GetUserInfo (aelf.Address) returns (UserInfo)  {
        option (aelf.is_view) = true;
    }    
    
    rpc GetHighestLevel (google.protobuf.Empty) returns (google.protobuf.Int64Value)  {
        option (aelf.is_view) = true;
    }
    rpc GetCourse (google.protobuf.Int64Value) returns (CourseOutput)  {
        option (aelf.is_view) = true;
    }
    rpc GetCourses (google.protobuf.Empty) returns (CoursesOutput)  {
        option (aelf.is_view) = true;
    }  
    rpc GetCourseSubmission (google.protobuf.Int64Value) returns (UserSubmissionListOutput)  {
        option (aelf.is_view) = true;
    }
    rpc GetLearnerSubmission (aelf.Address) returns (LearnerSubmissonsOutput)  {
        option (aelf.is_view) = true;
    }   
    rpc GetFundingHistory (google.protobuf.Empty) returns (FundingHistoryOutPut) {
        option (aelf.is_view) = true;
    }   
    //rpc methodName (Input) returns (google.protobuf.Empty) { }  
    

}


//messages
message InitializeInput {
     AddUserInput admin = 1;  
     AddUserInput chief_moderator = 2;   
}

message AddUserInput {
    aelf.Address address = 1; 
    string username = 2;
}

message AcademyInfo {
    aelf.Address owner= 1;
    int64 balance = 2;
    UserOutputList admins = 3;
    UserOutputList chief_moderators = 4;
}

message UserOutputList {
    repeated User users = 1;
}

message UserInfo {
    string username = 1;
    string role = 2;;
    int64 level = 3;
    int64 reward = 4;
}

message User {
    string username = 1;
    aelf.Address address = 2;
    int64 level = 3;
    int64 reward = 4;
}

message ModerateChallengeInput {
    int64 course_id = 1;
    aelf.Address learner_id = 2;
    bool is_approved = 3;
}

message CourseOutput {
    int64 course_id = 1;
    int64 submission_reward = 2;
    int64 moderation_reward = 3;
    int64 level = 4;
    string contenturl = 5;
    bool is_active = 6;
    string course_title = 7;
}

message CoursesOutput {
    repeated CourseOutput course_list = 1;
}

message Int64List {
    repeated int64 ids = 1;
}

message AddressList {
    repeated aelf.Address addresses = 1;
}
message SubmitChallengeInput {
    int64 course_id = 1;
    string submission_url = 2;
}

message  Submission { 
    string submission_url = 1;
    aelf.Address moderated_by = 2;
    bool is_approved = 3;
}
message SubmissionList { 
    repeated Submission list = 1;
}
message UserSubmissionList {
    aelf.Address address = 1;
    SubmissionList submissions = 2;
}
message UserSubmissionListOutput {
    repeated UserSubmissionList user_submissions = 1;
}

message LearnerSubmisson {
    int64 course_id = 1;    
    SubmissionList submissions = 2;
}

message LearnerSubmissonsOutput {
    repeated LearnerSubmisson submissions = 1;
}

message CourseInput {
    int64 submission_reward = 1;
    int64 moderation_reward = 2;
    int64 level = 3;
    string content_url = 4;
    string course_title = 5;
}

message Course {
    int64 submission_reward = 1;
    int64 moderation_reward = 2;
    int64 level = 3;
    string content_url = 4;
    bool is_active = 5;
    string course_title = 6;
}

message FundingMap {
    aelf.Address address = 1;
    int64 amount = 2;
}

message FundingHistoryOutPut {
    repeated FundingMap funding_list = 1;
}

//events
message AcademyInitializedEvent {
    option (aelf.is_event) = true;
    aelf.Address owner = 1;
}

message CourseAddedEvent {
    option (aelf.is_event) = true;
    int64 course_id = 1;
    int64 submission_reward = 2;
    int64 moderation_reward = 3;
    int64 level = 4;
    aelf.Address added_by = 5; 
    string course_title = 6;
}

message AdminAddedEvent {
    option (aelf.is_event) = true;
    aelf.Address added_by = 2;
    aelf.Address admin_address = 3;
}

message LearnerJoinedEvent {
    option (aelf.is_event) = true;    
    aelf.Address learner_address = 1;
}

message ChiefModeratorAddedEvent {
    option (aelf.is_event) = true;
    aelf.Address added_by = 1;
    aelf.Address moderator_address = 2;
}

message SubmitChallengeEvent {
    option (aelf.is_event) = true;
    aelf.Address submitted_by = 1;    
    int64 course_id = 2;
    string submission_url = 3;
}

message ModerateChallengeEvent {
    option (aelf.is_event) = true;    
    int64 courseId = 1;
    aelf.Address moderated_by = 2; 
    aelf.Address submitted_by = 3;
}

message FundAcademyEvent {
    option (aelf.is_event) = true;  
    int64 amount = 1;
    aelf.Address funded_by = 2;
}

enum RoleType {
    ADMIN = 0;
    LEARNER = 1;
    CHIEFMODERATOR = 2;
}


/**message Event {
    option (aelf.is_event) = true;
}

message Event {
    option (aelf.is_event) = true;
}**/


